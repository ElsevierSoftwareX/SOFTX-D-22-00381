/**
 * Copyright 2022
 * Andr√©s Segura-Tinoco
 * Information Retrieval Group at Universidad Autonoma de Madrid
 *
 * This is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * the current software. If not, see <http://www.gnu.org/licenses/>.
 */
package es.uam.irg.gui;

import es.uam.irg.io.IOManager;
import es.uam.irg.utils.FileUtils;
import es.uam.irg.utils.FunctionUtils;
import es.uam.irg.utils.StringUtils;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 * Argument annotation and evaluation form class (main GUI class.)
 */
public class ArgaelForm extends javax.swing.JFrame {

    // GUI constants
    private static final String HTML_CONTENT_TYPE = "text/html";
    private static final int PROPOSITION_MIN_SIZE = 3;
    private static final DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

    // GUI variables
    private String currDirectory;
    private String currEntity;
    private boolean isDirty;
    private final DataModel model;
    private final Queue<Integer> acSelected;
    private String fileExtension;
    private String userName;

    /**
     * Creates new ARGAEL form.
     *
     * @param components
     * @param relCategories
     * @param relIntents
     * @param qualityMetrics
     */
    public ArgaelForm(List<String> components, List<String> relCategories, List<String> relIntents, List<String> qualityMetrics) {
        initComponents();

        this.currDirectory = "";
        this.currEntity = "";
        this.isDirty = false;
        this.model = new DataModel(components, relCategories, relIntents, qualityMetrics);
        this.acSelected = new LinkedList<>();
        this.fileExtension = "";

        this.setTablesLookAndFeel();
        this.setComboBoxes();
        this.setVisible(true);
        this.setAppUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new javax.swing.JScrollPane();
        lstFiles = new javax.swing.JList<>();
        lblFileList = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        pnlAnnotation = new javax.swing.JPanel();
        lblAddArgComp = new javax.swing.JLabel();
        cmbArgCompType = new javax.swing.JComboBox<>();
        btnAddArgument = new javax.swing.JButton();
        scrollPane2 = new javax.swing.JScrollPane();
        textEditor = new javax.swing.JEditorPane();
        lblAddArgRel = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbIntent = new javax.swing.JComboBox<>();
        btnAddRelation = new javax.swing.JButton();
        scrollPane3 = new javax.swing.JScrollPane();
        tblArgComponents = new javax.swing.JTable();
        lblNumberArguments = new javax.swing.JLabel();
        lblDelete = new javax.swing.JLabel();
        btnDeleteAC = new javax.swing.JButton();
        btnDeleteAR = new javax.swing.JButton();
        scrollPane4 = new javax.swing.JScrollPane();
        tblArgRelations = new javax.swing.JTable();
        lblNumberRelations = new javax.swing.JLabel();
        lblRelationPreview = new javax.swing.JLabel();
        scrollPane5 = new javax.swing.JScrollPane();
        txtAnnotationPreview = new javax.swing.JEditorPane();
        pnlEvaluation = new javax.swing.JPanel();
        lblTargetAnnotator = new javax.swing.JLabel();
        cmbTargetAnnotator = new javax.swing.JComboBox<>();
        lblNumberArguments1 = new javax.swing.JLabel();
        lblNumberRelations1 = new javax.swing.JLabel();
        scrollPane6 = new javax.swing.JScrollPane();
        tblEvaComponents = new javax.swing.JTable();
        scrollPane7 = new javax.swing.JScrollPane();
        tblEvaRelations = new javax.swing.JTable();
        scrollPane8 = new javax.swing.JScrollPane();
        txtEvaluationPreview = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mItemImportJsonl = new javax.swing.JMenuItem();
        mItemImportText = new javax.swing.JMenuItem();
        mItemExport = new javax.swing.JMenuItem();
        menuHorzSeparator = new javax.swing.JPopupMenu.Separator();
        mItemClose = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenu();
        mItemSaveAnnotation = new javax.swing.JMenuItem();
        mItemSaveEvaluation = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        mItemAbout = new javax.swing.JMenuItem();
        menuUser = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARGAEL v1.0");
        setMinimumSize(new java.awt.Dimension(1111, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstFilesValueChanged(evt);
            }
        });
        scrollPane1.setViewportView(lstFiles);

        lblFileList.setText("File list:");

        lblAddArgComp.setText("Annotate AC:");

        btnAddArgument.setText("Add");
        btnAddArgument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddArgumentActionPerformed(evt);
            }
        });

        textEditor.setEditable(false);
        textEditor.setContentType(HTML_CONTENT_TYPE);
        scrollPane2.setViewportView(textEditor);

        lblAddArgRel.setText("Annotate AR:");

        btnAddRelation.setText("Add");
        btnAddRelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRelationActionPerformed(evt);
            }
        });

        tblArgComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblArgComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgComponentsMouseClicked(evt);
            }
        });
        scrollPane3.setViewportView(tblArgComponents);

        lblNumberArguments.setText("Number of argument components (ACs): 0");

        lblDelete.setText("Delete:");

        btnDeleteAC.setText("AC");
        btnDeleteAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteACActionPerformed(evt);
            }
        });

        btnDeleteAR.setText("AR");
        btnDeleteAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteARActionPerformed(evt);
            }
        });

        tblArgRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelationsMouseClicked(evt);
            }
        });
        scrollPane4.setViewportView(tblArgRelations);

        lblNumberRelations.setText("Number of argument relations (ARs): 0");

        lblRelationPreview.setText("Relation preview");

        scrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtAnnotationPreview.setEditable(false);
        txtAnnotationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane5.setViewportView(txtAnnotationPreview);

        javax.swing.GroupLayout pnlAnnotationLayout = new javax.swing.GroupLayout(pnlAnnotation);
        pnlAnnotation.setLayout(pnlAnnotationLayout);
        pnlAnnotationLayout.setHorizontalGroup(
            pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAnnotationLayout.createSequentialGroup()
                        .addComponent(lblAddArgComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbArgCompType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddArgument))
                    .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAnnotationLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAnnotationLayout.createSequentialGroup()
                                .addComponent(lblAddArgRel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddRelation))
                            .addComponent(scrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumberArguments))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(pnlAnnotationLayout.createSequentialGroup()
                                .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAnnotationLayout.createSequentialGroup()
                                        .addComponent(lblDelete)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDeleteAC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnDeleteAR))
                                    .addComponent(lblNumberRelations))
                                .addGap(0, 164, Short.MAX_VALUE))))
                    .addGroup(pnlAnnotationLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane5)
                            .addComponent(lblRelationPreview))))
                .addContainerGap())
        );
        pnlAnnotationLayout.setVerticalGroup(
            pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddArgComp)
                    .addComponent(cmbArgCompType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddArgument)
                    .addComponent(lblAddArgRel)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRelation)
                    .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDelete)
                    .addComponent(btnDeleteAR)
                    .addComponent(btnDeleteAC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAnnotationLayout.createSequentialGroup()
                        .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                            .addComponent(scrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumberArguments)
                            .addComponent(lblNumberRelations))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(lblRelationPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane2))
                .addContainerGap())
        );

        tabbedPane.addTab("Annotation", pnlAnnotation);

        lblTargetAnnotator.setText("Target annotator:");

        lblNumberArguments1.setText("Argument components (ACs)");

        lblNumberRelations1.setText("Argument relations (ARs)");

        tblEvaComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvaComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblEvaComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvaComponentsMouseClicked(evt);
            }
        });
        scrollPane6.setViewportView(tblEvaComponents);

        tblEvaRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvaRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblEvaRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvaRelationsMouseClicked(evt);
            }
        });
        scrollPane7.setViewportView(tblEvaRelations);

        scrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtEvaluationPreview.setEditable(false);
        txtEvaluationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane8.setViewportView(txtEvaluationPreview);

        javax.swing.GroupLayout pnlEvaluationLayout = new javax.swing.GroupLayout(pnlEvaluation);
        pnlEvaluation.setLayout(pnlEvaluationLayout);
        pnlEvaluationLayout.setHorizontalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane8)
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEvaluationLayout.createSequentialGroup()
                                .addComponent(lblTargetAnnotator)
                                .addGap(18, 18, 18)
                                .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlEvaluationLayout.createSequentialGroup()
                                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNumberArguments1))
                                .addGap(18, 18, 18)
                                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNumberRelations1)
                                    .addComponent(scrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlEvaluationLayout.setVerticalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTargetAnnotator)
                    .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumberRelations1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNumberArguments1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(scrollPane6))
                .addGap(11, 11, 11)
                .addComponent(scrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblTargetAnnotator.getAccessibleContext().setAccessibleName("Select annotator:");

        tabbedPane.addTab("Evaluation", pnlEvaluation);

        menuFile.setText("File");

        mItemImportJsonl.setText("Import from Jsonl");
        mItemImportJsonl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportJsonlActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportJsonl);

        mItemImportText.setText("Import from Text");
        mItemImportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportTextActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportText);

        mItemExport.setText("Export files");
        mItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemExportActionPerformed(evt);
            }
        });
        menuFile.add(mItemExport);
        menuFile.add(menuHorzSeparator);

        mItemClose.setText("Close");
        mItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCloseActionPerformed(evt);
            }
        });
        menuFile.add(mItemClose);

        menuBar.add(menuFile);

        menuSave.setText("Save");

        mItemSaveAnnotation.setText("Annotation");
        mItemSaveAnnotation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemSaveAnnotationActionPerformed(evt);
            }
        });
        menuSave.add(mItemSaveAnnotation);

        mItemSaveEvaluation.setText("Evaluation");
        mItemSaveEvaluation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemSaveEvaluationActionPerformed(evt);
            }
        });
        menuSave.add(mItemSaveEvaluation);

        menuBar.add(menuSave);

        menuHelp.setText("Help");

        mItemAbout.setText("About");
        mItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(mItemAbout);

        menuBar.add(menuHelp);

        menuUser.setText("| User:");
        menuBar.add(menuUser);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFileList))
                .addGap(18, 18, 18)
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFileList)
                        .addGap(9, 9, 9)
                        .addComponent(scrollPane1))
                    .addComponent(tabbedPane))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAboutActionPerformed
        // TODO add your handling code here:
        String aboutMsg = """
                          ARGAEL: ARGument Annotation and Evaluation tooL
                          
                          Version: 1.0.0
                          Date: 08/8/2022
                          Created by: Andr\u00e9s Segura-Tinoco & Iv\u00e1n Cantador 
                          License: Apache License 2.0
                          Web site: https://argrecsys.github.io/argael/
                          """;

        JOptionPane.showMessageDialog(this, aboutMsg, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mItemAboutActionPerformed

    private void mItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCloseActionPerformed
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_mItemCloseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void lstFilesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstFilesValueChanged
        // TODO add your handling code here:
        if (!lstFiles.isSelectionEmpty() && !evt.getValueIsAdjusting()) {
            if (isDirty) {
                String msg = "There are unsaved changes made to the file: " + currEntity + ".\nDo you want to save the changes?";
                int result = JOptionPane.showConfirmDialog(this, msg, "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    saveAnnotationsToFiles(currEntity);
                }
            }

            // Get current entity (file, proposal, etc.)
            acSelected.clear();
            currEntity = lstFiles.getSelectedValue();
            System.out.println(">> Selectd file: " + currEntity);

            // Display result data
            Map<String, List<String[]>> annotations = getSavedAnnotationData();
            Map<String, Map<Integer, String>> evaluations = getSavedEvaluationData();
            displayAnnotationData(annotations, evaluations);

            // Display HTML report
            updateHtmlReport();
            isDirty = false;
        }
    }//GEN-LAST:event_lstFilesValueChanged

    private void mItemImportJsonlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportJsonlActionPerformed
        // TODO add your handling code here:
        this.fileExtension = "jsonl";
        importFilesFromDirectory();
    }//GEN-LAST:event_mItemImportJsonlActionPerformed

    private void mItemImportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportTextActionPerformed
        // TODO add your handling code here:
        this.fileExtension = "txt";
        importFilesFromDirectory();
    }//GEN-LAST:event_mItemImportTextActionPerformed

    private void mItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemExportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mItemExportActionPerformed

    private void btnDeleteARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteARActionPerformed
        // TODO add your handling code here:
        if (tblArgRelations.getRowCount() > 0) {
            int row = tblArgRelations.getSelectedRow();

            if (row >= 0) {
                ((DefaultTableModel) tblArgRelations.getModel()).removeRow(row);
                ((DefaultTableModel) tblEvaRelations.getModel()).removeRow(row);
                updateCounterLabels();
                txtAnnotationPreview.setText("");
                txtEvaluationPreview.setText("");
                isDirty = true;
            }
        }
    }//GEN-LAST:event_btnDeleteARActionPerformed

    private void btnDeleteACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteACActionPerformed
        // TODO add your handling code here:
        if (tblArgComponents.getRowCount() > 0) {
            int row = tblArgComponents.getSelectedRow();

            if (row >= 0) {
                int acId = Integer.parseInt(tblArgComponents.getModel().getValueAt(row, 0).toString());

                if (!isAcInRelation(acId)) {

                    // Remove argument component
                    ((DefaultTableModel) tblArgComponents.getModel()).removeRow(row);
                    ((DefaultTableModel) tblEvaComponents.getModel()).removeRow(row);
                    updateCounterLabels();

                    // Display HTML report
                    updateHtmlReport();
                    isDirty = true;

                } else {
                    JOptionPane.showMessageDialog(this, "This AC cannot be eliminated, because it is part of an argumentative relation", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnDeleteACActionPerformed

    private void btnAddRelationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRelationActionPerformed
        // TODO add your handling code here:
        if (acSelected.size() == 2) {
            Integer[] selected = new Integer[2];
            selected = acSelected.toArray(selected);

            TableModel acModel = tblArgComponents.getModel();
            int acId1 = Integer.parseInt(acModel.getValueAt(selected[0], 0).toString());
            int acId2 = Integer.parseInt(acModel.getValueAt(selected[1], 0).toString());

            if (cmbCategory.getSelectedIndex() > 0 && cmbIntent.getSelectedIndex() > 0) {
                int arId = getNextRelationId();
                String category = cmbCategory.getSelectedItem().toString();
                String intent = cmbIntent.getSelectedItem().toString();

                Object[] newRow = new Object[]{arId, acId1, acId2, category, intent};
                ((DefaultTableModel) this.tblArgRelations.getModel()).addRow(newRow);
                ((DefaultTableModel) this.tblEvaRelations.getModel()).addRow(newRow);
                updateCounterLabels();

                tblArgComponents.clearSelection();
                tblArgRelations.clearSelection();
                acSelected.clear();
                isDirty = true;
            } else {
                JOptionPane.showMessageDialog(this, "You must select the category and main intent of the relation.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddRelationActionPerformed

    private void btnAddArgumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddArgumentActionPerformed
        // TODO add your handling code here:
        String propText = this.textEditor.getSelectedText().trim();

        if (propText != null) {
            propText = propText.trim();
            String propType = this.cmbArgCompType.getSelectedItem().toString();

            if (propText.length() > PROPOSITION_MIN_SIZE && !propType.equals("-")) {

                // Add new argument component
                int propId = getNextPropositionId();
                Object[] newRow = new Object[]{propId, propText, propType};
                ((DefaultTableModel) this.tblArgComponents.getModel()).addRow(newRow);
                ((DefaultTableModel) this.tblEvaComponents.getModel()).addRow(newRow);
                updateCounterLabels();

                // Display HTML report
                updateHtmlReport();
                isDirty = true;
            }
        }
    }//GEN-LAST:event_btnAddArgumentActionPerformed

    private void mItemSaveAnnotationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemSaveAnnotationActionPerformed
        // TODO add your handling code here:
        if (!StringUtils.isEmpty(currEntity)) {
            saveAnnotationsToFiles(currEntity);
            isDirty = false;
        }
    }//GEN-LAST:event_mItemSaveAnnotationActionPerformed

    private void mItemSaveEvaluationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemSaveEvaluationActionPerformed
        // TODO add your handling code here:
        if (!StringUtils.isEmpty(currEntity)) {
            saveEvaluationsToFiles(currEntity);
        }
    }//GEN-LAST:event_mItemSaveEvaluationActionPerformed

    private void tblArgComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblArgComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.add(row);
            if (acSelected.size() > 2) {
                acSelected.poll();
            }
        }
    }//GEN-LAST:event_tblArgComponentsMouseClicked

    private void tblArgRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblArgRelations.rowAtPoint(evt.getPoint());
        TableModel acModel = tblArgComponents.getModel();
        TableModel relModel = tblArgRelations.getModel();
        String relationString = createArgumentRelationString(row, acModel, relModel);
        txtAnnotationPreview.setText(relationString);
    }//GEN-LAST:event_tblArgRelationsMouseClicked

    private void tblEvaComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvaComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblEvaComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            TableModel acModel = tblEvaComponents.getModel();
            String acText = acModel.getValueAt(row, 1).toString();
            String acType = acModel.getValueAt(row, 2).toString();
            String text = String.format("[<b>%s</b>: %s]", acType, acText);
            txtEvaluationPreview.setText(text);
        }
    }//GEN-LAST:event_tblEvaComponentsMouseClicked

    private void tblEvaRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvaRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblEvaRelations.rowAtPoint(evt.getPoint());
        TableModel acModel = tblEvaComponents.getModel();
        TableModel arModel = tblEvaRelations.getModel();
        String relationString = createArgumentRelationString(row, acModel, arModel);
        txtEvaluationPreview.setText(relationString);
    }//GEN-LAST:event_tblEvaRelationsMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddArgument;
    private javax.swing.JButton btnAddRelation;
    private javax.swing.JButton btnDeleteAC;
    private javax.swing.JButton btnDeleteAR;
    private javax.swing.JComboBox<String> cmbArgCompType;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbIntent;
    private javax.swing.JComboBox<String> cmbTargetAnnotator;
    private javax.swing.JLabel lblAddArgComp;
    private javax.swing.JLabel lblAddArgRel;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblFileList;
    private javax.swing.JLabel lblNumberArguments;
    private javax.swing.JLabel lblNumberArguments1;
    private javax.swing.JLabel lblNumberRelations;
    private javax.swing.JLabel lblNumberRelations1;
    private javax.swing.JLabel lblRelationPreview;
    private javax.swing.JLabel lblTargetAnnotator;
    private javax.swing.JList<String> lstFiles;
    private javax.swing.JMenuItem mItemAbout;
    private javax.swing.JMenuItem mItemClose;
    private javax.swing.JMenuItem mItemExport;
    private javax.swing.JMenuItem mItemImportJsonl;
    private javax.swing.JMenuItem mItemImportText;
    private javax.swing.JMenuItem mItemSaveAnnotation;
    private javax.swing.JMenuItem mItemSaveEvaluation;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JPopupMenu.Separator menuHorzSeparator;
    private javax.swing.JMenu menuSave;
    private javax.swing.JMenu menuUser;
    private javax.swing.JPanel pnlAnnotation;
    private javax.swing.JPanel pnlEvaluation;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JScrollPane scrollPane3;
    private javax.swing.JScrollPane scrollPane4;
    private javax.swing.JScrollPane scrollPane5;
    private javax.swing.JScrollPane scrollPane6;
    private javax.swing.JScrollPane scrollPane7;
    private javax.swing.JScrollPane scrollPane8;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tblArgComponents;
    private javax.swing.JTable tblArgRelations;
    private javax.swing.JTable tblEvaComponents;
    private javax.swing.JTable tblEvaRelations;
    private javax.swing.JEditorPane textEditor;
    private javax.swing.JEditorPane txtAnnotationPreview;
    private javax.swing.JEditorPane txtEvaluationPreview;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param row
     * @param acModel
     * @param arModel
     * @return
     */
    private String createArgumentRelationString(int row, TableModel acModel, TableModel arModel) {
        // Collect relation data
        String text = "";

        if (row >= 0) {
            int acId1 = Integer.parseInt(arModel.getValueAt(row, 1).toString());
            int acId2 = Integer.parseInt(arModel.getValueAt(row, 2).toString());
            String category = arModel.getValueAt(row, 3).toString();
            String intent = arModel.getValueAt(row, 4).toString();
            int acIndex1 = getAcIndexFromTable(acModel, acId1, 0);
            int acIndex2 = getAcIndexFromTable(acModel, acId2, 0);

            // Show relation
            if (acIndex1 >= 0 && acIndex2 >= 0) {
                String acText1 = acModel.getValueAt(acIndex1, 1).toString();
                String acType1 = acModel.getValueAt(acIndex1, 2).toString();
                String acText2 = acModel.getValueAt(acIndex2, 1).toString();
                String acType2 = acModel.getValueAt(acIndex2, 2).toString();
                text = String.format("[<b>%s</b>: %s] \u2190 [<b>%s</b>: %s] (<b>Relation</b>: \"%s\" and \"%s\")", acType1, acText1, acType2, acText2, category, intent);
            }
        }

        return text;
    }

    /**
     * Closes winform.
     */
    private void closeForm() {
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }

    /**
     *
     * @param annotations
     * @param evaluations
     */
    private void displayAnnotationData(Map<String, List<String[]>> annotations, Map<String, Map<Integer, String>> evaluations) {
        List<String[]> acList = annotations.get(IOManager.FILE_ARG_COMP);
        List<String[]> arList = annotations.get(IOManager.FILE_ARG_REL);
        Map<Integer, String> acEval = evaluations.get(IOManager.FILE_ARG_COMP);
        Map<Integer, String> arEval = evaluations.get(IOManager.FILE_ARG_REL);

        // Update arguments table
        DefaultTableModel acModel1 = (DefaultTableModel) tblArgComponents.getModel();
        DefaultTableModel acModel2 = (DefaultTableModel) tblEvaComponents.getModel();
        acModel1.setRowCount(0);
        acModel2.setRowCount(0);

        for (int i = 0; i < acList.size(); i++) {
            String[] rowData = acList.get(i);
            int rowId = Integer.parseInt(rowData[0]);

            try {
                acModel1.addRow(FunctionUtils.getSubArray(rowData, 0, 3));
                acModel2.addRow(FunctionUtils.getSubArray(rowData, 0, 3));

                if (acEval.containsKey(rowId)) {
                    acModel2.setValueAt(acEval.get(rowId), i, 3);
                }
            } catch (Exception ex) {
                Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // Update relations table
        DefaultTableModel arModel1 = (DefaultTableModel) tblArgRelations.getModel();
        DefaultTableModel arModel2 = (DefaultTableModel) tblEvaRelations.getModel();
        arModel1.setRowCount(0);
        arModel2.setRowCount(0);

        for (int i = 0; i < arList.size(); i++) {
            String[] rowData = arList.get(i);
            int rowId = Integer.parseInt(rowData[0]);

            try {
                arModel1.addRow(FunctionUtils.getSubArray(rowData, 0, 5));
                arModel2.addRow(FunctionUtils.getSubArray(rowData, 0, 5));

                if (arEval.containsKey(rowId)) {
                    arModel2.setValueAt(arEval.get(rowId), i, 5);
                }
            } catch (Exception ex) {
                Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        updateCounterLabels();
    }

    /**
     *
     * @param model
     * @param acId
     * @param acIdIx
     * @return
     */
    private int getAcIndexFromTable(TableModel model, int acId, int acIdIx) {
        int ix = -1;
        for (int i = 0; i < model.getRowCount() && ix == -1; i++) {
            if (acId == Integer.parseInt(model.getValueAt(i, acIdIx).toString())) {
                ix = i;
            }
        }
        return ix;
    }

    /**
     *
     * @return
     */
    private int getNextPropositionId() {
        int propNextId = 1;
        int nRows = this.tblArgComponents.getRowCount();
        if (nRows > 0) {
            propNextId = Integer.parseInt(this.tblArgComponents.getModel().getValueAt(nRows - 1, 0).toString()) + 1;
        }
        return propNextId;
    }

    /**
     *
     * @return
     */
    private int getNextRelationId() {
        int propNextId = 1;
        int nRows = this.tblArgRelations.getRowCount();
        if (nRows > 0) {
            propNextId = Integer.parseInt(this.tblArgRelations.getModel().getValueAt(nRows - 1, 0).toString()) + 1;
        }
        return propNextId;
    }

    /**
     *
     * @return
     */
    private Map<String, List<String[]>> getSavedAnnotationData() {
        String directory = currDirectory + "\\..\\results\\annotations\\";
        String currFile = currEntity;
        return IOManager.readAnnotationData(directory, currFile);
    }

    /**
     *
     * @return
     */
    private Map<String, Map<Integer, String>> getSavedEvaluationData() {
        String directory = currDirectory + "\\..\\results\\evaluations\\";
        String currFile = currEntity;
        return IOManager.readEvaluationData(directory, currFile);
    }

    /**
     *
     * @return
     */
    private String getSelectedReport() {
        String filepath = currDirectory + "\\" + currEntity + "." + fileExtension;
        String report = this.model.getFileReport(filepath, fileExtension);
        return report;
    }

    /**
     *
     * @param fileExt
     */
    private void importFilesFromDirectory() {
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new java.io.File("."));
        jfc.setDialogTitle("Select folder");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setAcceptAllFileFilterUsed(false);

        if (jfc.showOpenDialog(ArgaelForm.this) == JFileChooser.APPROVE_OPTION) {
            currDirectory = jfc.getSelectedFile().toString();
            List<String> files = model.readFilenamesInFolder(currDirectory, fileExtension);
            System.out.println(String.format(">> Directory: '%s' and number of uploaded files: %d", currDirectory, files.size()));

            lstFiles.removeAll();
            if (files.size() > 0) {
                DefaultListModel listModel = new DefaultListModel();
                listModel.addAll(files);
                lstFiles.setModel(listModel);
            }
        }
    }

    /**
     *
     * @param acId
     * @return
     */
    private boolean isAcInRelation(int acId) {
        TableModel arModel = tblArgRelations.getModel();
        if (getAcIndexFromTable(arModel, acId, 1) >= 0 || getAcIndexFromTable(arModel, acId, 2) >= 0) {
            return true;
        }
        return false;
    }

    /**
     *
     */
    private void updateCounterLabels() {
        lblNumberArguments.setText("Number of argument components (ACs): " + tblArgComponents.getRowCount());
        lblNumberRelations.setText("Number of argument relations (ARs): " + tblArgRelations.getRowCount());
    }

    /**
     *
     * @param entity
     */
    private void saveAnnotationsToFiles(String entity) {

        if (!lstFiles.isSelectionEmpty()) {
            String fileName;
            List<String> header;
            List<String[]> acAnnotations = new ArrayList<>();
            List<String[]> arAnnotations = new ArrayList<>();

            // Loop through the rows
            TableModel acModel = tblArgComponents.getModel();
            for (int i = 0; i < acModel.getRowCount(); i++) {
                String acId = acModel.getValueAt(i, 0).toString();
                String acText = acModel.getValueAt(i, 1).toString();
                String acType = acModel.getValueAt(i, 2).toString();
                String dateStamp = dateFormat.format(new Date());
                acAnnotations.add(new String[]{acId, acText, acType, userName, dateStamp});
            }

            // Loop through the rows
            TableModel arModel = tblArgRelations.getModel();
            for (int i = 0; i < arModel.getRowCount(); i++) {
                String arId = arModel.getValueAt(i, 0).toString();
                String acId1 = arModel.getValueAt(i, 1).toString();
                String acId2 = arModel.getValueAt(i, 2).toString();
                String relType = arModel.getValueAt(i, 3).toString();
                String relIntent = arModel.getValueAt(i, 4).toString();
                String dateStamp = dateFormat.format(new Date());
                arAnnotations.add(new String[]{arId, acId1, acId2, relType, relIntent, userName, dateStamp});
            }

            // Save ACs results
            fileName = entity + "_" + IOManager.FILE_ARG_COMP;
            header = new ArrayList<>(Arrays.asList("ac_id", "ac_text", "ac_type", "annotator", "timestamp"));
            saveResults(fileName, "annotations", header, acAnnotations);

            // Save ARs results
            fileName = entity + "_" + IOManager.FILE_ARG_REL;
            header = new ArrayList<>(Arrays.asList("ar_id", "ac_id1", "ac_id2", "rel_type", "rel_intent", "annotator", "timestamp"));
            saveResults(fileName, "annotations", header, arAnnotations);
        }

    }

    /**
     *
     * @param entity
     */
    private void saveEvaluationsToFiles(String entity) {

        if (!lstFiles.isSelectionEmpty()) {
            String fileName;
            List<String> header;
            List<String[]> acEvaluations = new ArrayList<>();
            List<String[]> arEvaluations = new ArrayList<>();

            // Loop through the rows
            TableModel acModel = tblEvaComponents.getModel();
            for (int i = 0; i < acModel.getRowCount(); i++) {
                if (acModel.getValueAt(i, 3) != null) {
                    String acId = acModel.getValueAt(i, 0).toString();
                    String acQuality = acModel.getValueAt(i, 3).toString();
                    String dateStamp = dateFormat.format(new Date());
                    acEvaluations.add(new String[]{acId, acQuality, userName, dateStamp});
                }
            }

            // Loop through the rows
            TableModel arModel = tblEvaRelations.getModel();
            for (int i = 0; i < arModel.getRowCount(); i++) {
                if (arModel.getValueAt(i, 5) != null) {
                    String arId = arModel.getValueAt(i, 0).toString();
                    String arQuality = arModel.getValueAt(i, 5).toString();
                    String dateStamp = dateFormat.format(new Date());
                    arEvaluations.add(new String[]{arId, arQuality, userName, dateStamp});
                }
            }

            // Save ACs results
            fileName = entity + "_" + IOManager.FILE_ARG_COMP;
            header = new ArrayList<>(Arrays.asList("ac_id", "ac_quality", "evaluator", "timestamp"));
            saveResults(fileName, "evaluations", header, acEvaluations);

            // Save ARs results
            fileName = entity + "_" + IOManager.FILE_ARG_REL;
            header = new ArrayList<>(Arrays.asList("ar_id", "ar_quality", "evaluator", "timestamp"));
            saveResults(fileName, "evaluations", header, arEvaluations);
        }

    }

    /**
     *
     * @param fileName
     * @param fileType
     * @param header
     * @param rows
     * @return
     */
    private boolean saveResults(String fileName, String fileType, List<String> header, List<String[]> rows) {
        boolean result = false;
        String directory = currDirectory + "\\..\\results\\" + fileType;
        String filePath = directory + "\\" + fileName + ".csv";
        List<String[]> data = new ArrayList<>();
        data.add(header.toArray(new String[header.size()]));
        data.addAll(rows);

        result = FileUtils.createDirectory(directory);
        if (result) {
            result = FileUtils.saveCsvFile(filePath, data);
            if (result) {
                System.out.println(">> Data saved correctly (" + fileType + ").");
            }
        }

        return result;
    }

    /**
     *
     */
    private void setComboBoxes() {
        List<String> components = model.getArgumentComponents();
        List<String> relCategories = model.getRelationCategories();
        List<String> relIntents = model.getRelationIntents();

        components.add(0, "-");
        cmbArgCompType.setModel(new DefaultComboBoxModel<>(components.toArray(new String[0])));

        relCategories.add(0, "-");
        cmbCategory.setModel(new DefaultComboBoxModel<>(relCategories.toArray(new String[0])));

        relIntents.add(0, "-");
        cmbIntent.setModel(new DefaultComboBoxModel<>(relIntents.toArray(new String[0])));
    }

    /**
     *
     */
    private void setTablesLookAndFeel() {
        TableColumnModel colModel;

        // Argument Quality Selector
        List<String> qualityMetrics = model.getQualityMetrics();
        JComboBox cmbArgQuality = new JComboBox();
        cmbArgQuality.setModel(new DefaultComboBoxModel<>(qualityMetrics.toArray(new String[0])));

        // Default column renderer
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        // ComboBox column renderer
        DefaultTableCellRenderer evalRenderer = new DefaultTableCellRenderer();
        evalRenderer.setToolTipText("Click to select the quality of the argument unit.");

        // Table 1: Argument Component Units
        colModel = tblArgComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(210);
        colModel.getColumn(2).setPreferredWidth(90);
        colModel.getColumn(2).setCellRenderer(centerRenderer);

        // Table 2: Argument Component Relations
        colModel = tblArgRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(110);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(90);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 3: Evaluation Argument Component Units
        colModel = tblEvaComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(602);
        colModel.getColumn(2).setPreferredWidth(120);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(120);
        colModel.getColumn(3).setCellRenderer(evalRenderer);
        colModel.getColumn(3).setCellEditor(new DefaultCellEditor(cmbArgQuality));

        // Table 4: Evaluation Argument Component Relations
        colModel = tblEvaRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(60);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(60);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(100);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);
        colModel.getColumn(5).setPreferredWidth(120);
        colModel.getColumn(5).setCellRenderer(evalRenderer);
        colModel.getColumn(5).setCellEditor(new DefaultCellEditor(cmbArgQuality));
    }

    /**
     *
     */
    private void setAppUsers() {
        String[] users = model.getUserList();
        String result = (String) JOptionPane.showInputDialog(this, "Please, select the annotator:", "Selection", JOptionPane.PLAIN_MESSAGE, null, users, "");

        if (result != null && result.length() > 0) {
            userName = result;
        } else {
            userName = "admin";
        }

        this.menuUser.setText("| User: " + userName);
        this.cmbTargetAnnotator.setModel(new DefaultComboBoxModel(users));
        this.cmbTargetAnnotator.removeItem(userName);
    }

    /**
     * Display and update html report.
     */
    private void updateHtmlReport() {
        String report = getSelectedReport();
        int caretPosition = this.textEditor.getCaretPosition();

        // Update report
        TableModel acModel = tblArgComponents.getModel();
        String hlText;
        String acText;
        String acType;

        for (int i = 0; i < acModel.getRowCount(); i++) {
            acText = acModel.getValueAt(i, 1).toString();
            acType = acModel.getValueAt(i, 2).toString();

            switch (acType.toLowerCase()) {
                case "major claim":
                    hlText = model.getFormatter().highlightMajorClaim(acText);
                    break;
                case "claim":
                    hlText = model.getFormatter().highlightClaim(acText);
                    break;
                default:
                    hlText = model.getFormatter().highlightPremise(acText);
                    break;
            }
            report = report.replace(acText, hlText);
        }

        // Display report
        this.textEditor.setText(report);
        this.textEditor.setCaretPosition(caretPosition);
        this.txtAnnotationPreview.setText("");
        this.txtEvaluationPreview.setText("");
    }

}
