/**
 * Copyright 2022
 * Andr√©s Segura-Tinoco
 * Information Retrieval Group at Universidad Autonoma de Madrid
 *
 * This is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * the current software. If not, see <http://www.gnu.org/licenses/>.
 */
package es.uam.irg.gui;

import es.uam.irg.io.IOManager;
import es.uam.irg.utils.FileUtils;
import es.uam.irg.utils.StringUtils;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 * Argument annotation and evaluation form class (main GUI class.)
 */
public class ArgaelForm extends javax.swing.JFrame {

    // GUI constants
    private static final String HTML_CONTENT_TYPE = "text/html";
    private static final DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

    // GUI variables
    private String currDirectory;
    private String currEntity;
    private int currTabIndex;
    private final DataModel model;
    private final Queue<Integer> acSelected;
    private String fileExtension;
    private String userName;

    /**
     * Creates new ARGAEL form.
     *
     * @param dataFolder
     * @param fileExtension
     * @param components
     * @param relCategories
     * @param relIntents
     * @param qualityMetrics
     */
    public ArgaelForm(String dataFolder, String fileExtension, List<String> components, List<String> relCategories, List<String> relIntents, List<String> qualityMetrics) {
        initComponents();

        this.currEntity = "";
        this.currTabIndex = 0;
        this.currDirectory = dataFolder;
        this.fileExtension = fileExtension;
        this.model = new DataModel(components, relCategories, relIntents, qualityMetrics);
        this.acSelected = new LinkedList<>();

        this.setTablesLookAndFeel();
        this.setComboBoxes();
        this.setVisible(true);
        this.setAppUsers();
        this.importFilesFromDirectory(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDocList = new javax.swing.JLabel();
        scrollPane1 = new javax.swing.JScrollPane();
        lstDocs = new javax.swing.JList<>();
        tabbedPane = new javax.swing.JTabbedPane();
        pnlIndependentAnnotation = new javax.swing.JPanel();
        lblAddArgComp = new javax.swing.JLabel();
        cmbArgCompType = new javax.swing.JComboBox<>();
        btnAddArgument = new javax.swing.JButton();
        scrollPane2 = new javax.swing.JScrollPane();
        edtSimpleAnnotation = new javax.swing.JEditorPane();
        lblAddArgRel = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox<>();
        cmbIntent = new javax.swing.JComboBox<>();
        btnAddRelation = new javax.swing.JButton();
        scrollPane3 = new javax.swing.JScrollPane();
        tblArgComponents = new javax.swing.JTable();
        lblNumberArguments = new javax.swing.JLabel();
        lblDelete = new javax.swing.JLabel();
        btnDeleteAC = new javax.swing.JButton();
        btnDeleteAR = new javax.swing.JButton();
        scrollPane4 = new javax.swing.JScrollPane();
        tblArgRelations = new javax.swing.JTable();
        lblNumberRelations = new javax.swing.JLabel();
        lblRelationPreview = new javax.swing.JLabel();
        scrollPane5 = new javax.swing.JScrollPane();
        txtAnnotationPreview = new javax.swing.JEditorPane();
        pnlAssistedAnnotation = new javax.swing.JPanel();
        lblTargetAnnotator1 = new javax.swing.JLabel();
        cmbTargetAnnotator1 = new javax.swing.JComboBox<>();
        scrollPane6 = new javax.swing.JScrollPane();
        edtTargetAnnotation = new javax.swing.JEditorPane();
        scrollPane7 = new javax.swing.JScrollPane();
        tblArgRelations2 = new javax.swing.JTable();
        btnArgRelCopy = new javax.swing.JButton();
        lblAddArgComp1 = new javax.swing.JLabel();
        cmbArgCompType1 = new javax.swing.JComboBox<>();
        btnAddArgument1 = new javax.swing.JButton();
        lblAddArgRel1 = new javax.swing.JLabel();
        cmbCategory1 = new javax.swing.JComboBox<>();
        cmbIntent1 = new javax.swing.JComboBox<>();
        btnAddRelation1 = new javax.swing.JButton();
        lblDelete1 = new javax.swing.JLabel();
        btnDeleteAC1 = new javax.swing.JButton();
        btnDeleteAR1 = new javax.swing.JButton();
        scrollPane8 = new javax.swing.JScrollPane();
        edtAssistedAnnotation = new javax.swing.JEditorPane();
        scrollPane9 = new javax.swing.JScrollPane();
        tblArgComponents1 = new javax.swing.JTable();
        lblNumberArguments2 = new javax.swing.JLabel();
        scrollPane10 = new javax.swing.JScrollPane();
        tblArgRelations1 = new javax.swing.JTable();
        lblNumberRelations2 = new javax.swing.JLabel();
        pnlEvaluation = new javax.swing.JPanel();
        lblTargetAnnotator = new javax.swing.JLabel();
        cmbTargetAnnotator = new javax.swing.JComboBox<>();
        lblNumberArguments1 = new javax.swing.JLabel();
        lblNumberRelations1 = new javax.swing.JLabel();
        scrollPane11 = new javax.swing.JScrollPane();
        tblEvaComponents = new javax.swing.JTable();
        scrollPane12 = new javax.swing.JScrollPane();
        tblEvaRelations = new javax.swing.JTable();
        scrollPane13 = new javax.swing.JScrollPane();
        txtEvaluationPreview = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        mItemImportJsonl = new javax.swing.JMenuItem();
        mItemImportText = new javax.swing.JMenuItem();
        mItemExport = new javax.swing.JMenuItem();
        menuHorzSeparator = new javax.swing.JPopupMenu.Separator();
        mItemClose = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        mItemAbout = new javax.swing.JMenuItem();
        menuUser = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ARGAEL v1.4");
        setMinimumSize(new java.awt.Dimension(1111, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblDocList.setText("Document list:");

        lstDocs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDocs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstDocsValueChanged(evt);
            }
        });
        scrollPane1.setViewportView(lstDocs);

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        lblAddArgComp.setText("Annotate AC:");

        btnAddArgument.setText("Add");
        btnAddArgument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddArgumentActionPerformed(evt);
            }
        });

        edtSimpleAnnotation.setEditable(false);
        edtSimpleAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane2.setViewportView(edtSimpleAnnotation);

        lblAddArgRel.setText("Annotate AR:");

        btnAddRelation.setText("Add");
        btnAddRelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRelationActionPerformed(evt);
            }
        });

        tblArgComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblArgComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgComponentsMouseClicked(evt);
            }
        });
        scrollPane3.setViewportView(tblArgComponents);

        lblNumberArguments.setText("Number of argument components (ACs): 0");

        lblDelete.setText("Delete:");

        btnDeleteAC.setText("AC");
        btnDeleteAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteACActionPerformed(evt);
            }
        });

        btnDeleteAR.setText("AR");
        btnDeleteAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteARActionPerformed(evt);
            }
        });

        tblArgRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelationsMouseClicked(evt);
            }
        });
        scrollPane4.setViewportView(tblArgRelations);

        lblNumberRelations.setText("Number of argument relations (ARs): 0");

        lblRelationPreview.setText("Relation preview");

        scrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtAnnotationPreview.setEditable(false);
        txtAnnotationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane5.setViewportView(txtAnnotationPreview);

        javax.swing.GroupLayout pnlIndependentAnnotationLayout = new javax.swing.GroupLayout(pnlIndependentAnnotation);
        pnlIndependentAnnotation.setLayout(pnlIndependentAnnotationLayout);
        pnlIndependentAnnotationLayout.setHorizontalGroup(
            pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addComponent(lblAddArgComp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbArgCompType, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddArgument))
                    .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumberArguments)
                            .addComponent(scrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIndependentAnnotationLayout.createSequentialGroup()
                                .addComponent(lblAddArgRel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddRelation)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                                .addComponent(lblNumberRelations)
                                .addGap(0, 208, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIndependentAnnotationLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeleteAC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteAR))
                            .addComponent(scrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane5)
                            .addComponent(lblRelationPreview))))
                .addContainerGap())
        );
        pnlIndependentAnnotationLayout.setVerticalGroup(
            pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIndependentAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddArgComp)
                    .addComponent(cmbArgCompType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddArgument)
                    .addComponent(lblAddArgRel)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddRelation)
                    .addComponent(cmbIntent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDelete)
                    .addComponent(btnDeleteAR)
                    .addComponent(btnDeleteAC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlIndependentAnnotationLayout.createSequentialGroup()
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                            .addComponent(scrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlIndependentAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumberArguments)
                            .addComponent(lblNumberRelations))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(lblRelationPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane2))
                .addContainerGap())
        );

        tabbedPane.addTab("Independent Annotation", pnlIndependentAnnotation);

        lblTargetAnnotator1.setText("Target annotator:");

        cmbTargetAnnotator1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTargetAnnotator1ActionPerformed(evt);
            }
        });

        edtTargetAnnotation.setEditable(false);
        edtTargetAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane6.setViewportView(edtTargetAnnotation);

        tblArgRelations2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane7.setViewportView(tblArgRelations2);

        btnArgRelCopy.setText("Copy");
        btnArgRelCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArgRelCopyActionPerformed(evt);
            }
        });

        lblAddArgComp1.setText("Annotate AC:");

        cmbArgCompType1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddArgument1.setText("Add");
        btnAddArgument1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddArgument1ActionPerformed(evt);
            }
        });

        lblAddArgRel1.setText("Annotate AR:");

        btnAddRelation1.setText("Add");
        btnAddRelation1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRelation1ActionPerformed(evt);
            }
        });

        lblDelete1.setText("Delete:");

        btnDeleteAC1.setText("AC");
        btnDeleteAC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAC1ActionPerformed(evt);
            }
        });

        btnDeleteAR1.setText("AR");
        btnDeleteAR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAR1ActionPerformed(evt);
            }
        });

        edtAssistedAnnotation.setEditable(false);
        edtAssistedAnnotation.setContentType(HTML_CONTENT_TYPE);
        scrollPane8.setViewportView(edtAssistedAnnotation);

        tblArgComponents1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgComponents1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblArgComponents1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgComponents1MouseClicked(evt);
            }
        });
        scrollPane9.setViewportView(tblArgComponents1);

        lblNumberArguments2.setText("Number of argument components (ACs): 0");

        tblArgRelations1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArgRelations1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblArgRelations1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArgRelations1MouseClicked(evt);
            }
        });
        scrollPane10.setViewportView(tblArgRelations1);

        lblNumberRelations2.setText("Number of argument relations (ARs): 0");

        javax.swing.GroupLayout pnlAssistedAnnotationLayout = new javax.swing.GroupLayout(pnlAssistedAnnotation);
        pnlAssistedAnnotation.setLayout(pnlAssistedAnnotationLayout);
        pnlAssistedAnnotationLayout.setHorizontalGroup(
            pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(btnArgRelCopy))
                    .addComponent(scrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(lblTargetAnnotator1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTargetAnnotator1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                            .addComponent(lblNumberArguments2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumberRelations2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(lblAddArgComp1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbArgCompType1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddArgument1)
                        .addGap(18, 18, 18)
                        .addComponent(lblAddArgRel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIntent1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddRelation1)
                        .addGap(18, 18, 18)
                        .addComponent(lblDelete1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteAC1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteAR1)))
                .addContainerGap())
        );
        pnlAssistedAnnotationLayout.setVerticalGroup(
            pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAddArgComp1)
                        .addComponent(cmbArgCompType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddArgument1)
                        .addComponent(lblAddArgRel1)
                        .addComponent(cmbCategory1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddRelation1)
                        .addComponent(cmbIntent1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDelete1)
                        .addComponent(btnDeleteAR1)
                        .addComponent(btnDeleteAC1))
                    .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTargetAnnotator1)
                        .addComponent(cmbTargetAnnotator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblNumberArguments2)
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumberRelations2))
                    .addComponent(scrollPane8)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAssistedAnnotationLayout.createSequentialGroup()
                        .addComponent(scrollPane6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAssistedAnnotationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnArgRelCopy))))
                .addContainerGap())
        );

        tabbedPane.addTab("Assisted Annotation", pnlAssistedAnnotation);

        lblTargetAnnotator.setText("Target annotator:");

        lblNumberArguments1.setText("Argument components (ACs)");

        lblNumberRelations1.setText("Argument relations (ARs)");

        tblEvaComponents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AC Id", "Text", "Type", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvaComponents.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblEvaComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvaComponentsMouseClicked(evt);
            }
        });
        scrollPane11.setViewportView(tblEvaComponents);

        tblEvaRelations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "AR Id", "AC Id 1", "AC Id 2", "Relation Type", "Intent", "Evaluation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvaRelations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblEvaRelations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEvaRelationsMouseClicked(evt);
            }
        });
        scrollPane12.setViewportView(tblEvaRelations);

        scrollPane13.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtEvaluationPreview.setEditable(false);
        txtEvaluationPreview.setContentType(HTML_CONTENT_TYPE);
        scrollPane13.setViewportView(txtEvaluationPreview);

        javax.swing.GroupLayout pnlEvaluationLayout = new javax.swing.GroupLayout(pnlEvaluation);
        pnlEvaluation.setLayout(pnlEvaluationLayout);
        pnlEvaluationLayout.setHorizontalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane13)
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addComponent(lblTargetAnnotator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1220, Short.MAX_VALUE))
                    .addGroup(pnlEvaluationLayout.createSequentialGroup()
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 902, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumberArguments1))
                        .addGap(18, 18, 18)
                        .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEvaluationLayout.createSequentialGroup()
                                .addComponent(lblNumberRelations1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(scrollPane12))))
                .addContainerGap())
        );
        pnlEvaluationLayout.setVerticalGroup(
            pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEvaluationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTargetAnnotator)
                    .addComponent(cmbTargetAnnotator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumberRelations1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNumberArguments1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlEvaluationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(scrollPane11))
                .addGap(11, 11, 11)
                .addComponent(scrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        lblTargetAnnotator.getAccessibleContext().setAccessibleName("Select annotator:");

        tabbedPane.addTab("Evaluation", pnlEvaluation);

        menuFile.setText("Docs");

        mItemImportJsonl.setText("Import from Jsonl");
        mItemImportJsonl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportJsonlActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportJsonl);

        mItemImportText.setText("Import from Text");
        mItemImportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemImportTextActionPerformed(evt);
            }
        });
        menuFile.add(mItemImportText);

        mItemExport.setText("Export files");
        mItemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemExportActionPerformed(evt);
            }
        });
        menuFile.add(mItemExport);
        menuFile.add(menuHorzSeparator);

        mItemClose.setText("Close");
        mItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCloseActionPerformed(evt);
            }
        });
        menuFile.add(mItemClose);

        menuBar.add(menuFile);

        menuHelp.setText("Help");

        mItemAbout.setText("About");
        mItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(mItemAbout);

        menuBar.add(menuHelp);

        menuUser.setText("| User:");
        menuBar.add(menuUser);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDocList))
                .addGap(18, 18, 18)
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDocList)
                        .addGap(9, 9, 9)
                        .addComponent(scrollPane1))
                    .addComponent(tabbedPane))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void lstDocsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDocsValueChanged
        // TODO add your handling code here:
        if (!lstDocs.isSelectionEmpty() && !evt.getValueIsAdjusting()) {
            this.currEntity = lstDocs.getSelectedValue();
            updateViewData();
        }
    }//GEN-LAST:event_lstDocsValueChanged

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        // TODO add your handling code here:
        currTabIndex = tabbedPane.getSelectedIndex();
        updateViewData();
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void mItemImportJsonlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportJsonlActionPerformed
        // TODO add your handling code here:
        this.fileExtension = IOManager.DocExt.JSONL.toString();
        importFilesFromDirectory(true);
    }//GEN-LAST:event_mItemImportJsonlActionPerformed

    private void mItemImportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemImportTextActionPerformed
        // TODO add your handling code here:
        this.fileExtension = IOManager.DocExt.TXT.toString();
        importFilesFromDirectory(true);
    }//GEN-LAST:event_mItemImportTextActionPerformed

    private void mItemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemExportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mItemExportActionPerformed

    private void mItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCloseActionPerformed
        // TODO add your handling code here:
        closeForm();
    }//GEN-LAST:event_mItemCloseActionPerformed

    private void mItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAboutActionPerformed
        // TODO add your handling code here:
        String aboutMsg = """
                          ARGAEL: ARGument Annotation and Evaluation tooL
                          
                          Version: 1.6.0
                          Date: 10/18/2022
                          Created by: Andr\u00e9s Segura-Tinoco & Iv\u00e1n Cantador 
                          License: Apache License 2.0
                          Web site: https://argrecsys.github.io/argael/
                          """;

        JOptionPane.showMessageDialog(this, aboutMsg, "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mItemAboutActionPerformed

    private void btnAddArgumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddArgumentActionPerformed
        // TODO add your handling code here:
        boolean result = ArgaelFormUtils.createNewArgumentComponent(edtSimpleAnnotation, cmbArgCompType, tblArgComponents);
        if (result) {
            saveViewData();
            updatePanelData(edtSimpleAnnotation, null, null, userName, "");
            ArgaelFormUtils.updateCounterLabels(lblNumberArguments, tblArgComponents, "components (ACs)");
        }
    }//GEN-LAST:event_btnAddArgumentActionPerformed

    private void btnAddArgument1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddArgument1ActionPerformed
        // TODO add your handling code here:
        boolean result = ArgaelFormUtils.createNewArgumentComponent(edtAssistedAnnotation, cmbArgCompType1, tblArgComponents1);
        if (result) {
            saveViewData();
            updatePanelData(edtAssistedAnnotation, null, null, userName, "");
            ArgaelFormUtils.updateCounterLabels(lblNumberArguments1, tblArgComponents1, "components (ACs)");
        }
    }//GEN-LAST:event_btnAddArgument1ActionPerformed

    private void btnAddRelationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRelationActionPerformed
        // TODO add your handling code here:
        if (acSelected.size() == 2) {
            boolean result = ArgaelFormUtils.createNewArgumentRelation(acSelected, tblArgComponents, cmbCategory, cmbIntent, tblArgRelations);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations, tblArgRelations, "relations (ARs)");
            }
        }
    }//GEN-LAST:event_btnAddRelationActionPerformed

    private void btnAddRelation1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRelation1ActionPerformed
        // TODO add your handling code here:
        if (acSelected.size() == 2) {
            boolean result = ArgaelFormUtils.createNewArgumentRelation(acSelected, tblArgComponents1, cmbCategory1, cmbIntent1, tblArgRelations1);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations1, tblArgRelations1, "relations (ARs)");
            }
        }
    }//GEN-LAST:event_btnAddRelation1ActionPerformed

    private void btnDeleteACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteACActionPerformed
        // TODO add your handling code here:
        if (tblArgComponents.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentComponent(tblArgComponents, tblArgRelations);
            if (result) {
                saveViewData();
                updatePanelData(edtSimpleAnnotation, null, null, userName, "");
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments, tblArgComponents, "components (ACs)");
            }
        }
    }//GEN-LAST:event_btnDeleteACActionPerformed

    private void btnDeleteAC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAC1ActionPerformed
        // TODO add your handling code here:
        if (tblArgComponents1.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentComponent(tblArgComponents1, tblArgRelations1);
            if (result) {
                saveViewData();
                updatePanelData(edtAssistedAnnotation, null, null, userName, "");
                ArgaelFormUtils.updateCounterLabels(lblNumberArguments1, tblArgComponents1, "components (ACs)");
            }
        }
    }//GEN-LAST:event_btnDeleteAC1ActionPerformed

    private void btnDeleteARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteARActionPerformed
        // TODO add your handling code here:
        if (tblArgRelations.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentRelation(tblArgRelations);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations, tblArgRelations, "relations (ARs)");
                txtAnnotationPreview.setText("");
            }
        }
    }//GEN-LAST:event_btnDeleteARActionPerformed

    private void btnDeleteAR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAR1ActionPerformed
        // TODO add your handling code here:
        if (tblArgRelations1.getRowCount() > 0) {
            boolean result = ArgaelFormUtils.deleteArgumentRelation(tblArgRelations1);
            if (result) {
                saveViewData();
                ArgaelFormUtils.updateCounterLabels(lblNumberRelations1, tblArgRelations1, "relations (ARs)");
            }
        }
    }//GEN-LAST:event_btnDeleteAR1ActionPerformed

    private void tblArgComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblArgComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.add(row);
            if (acSelected.size() > 2) {
                acSelected.poll();
            }
        }
    }//GEN-LAST:event_tblArgComponentsMouseClicked

    private void tblArgComponents1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgComponents1MouseClicked
        // TODO add your handling code here:
        int row = tblArgComponents1.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            acSelected.add(row);
            if (acSelected.size() > 2) {
                acSelected.poll();
            }
        }
    }//GEN-LAST:event_tblArgComponents1MouseClicked

    private void tblEvaComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvaComponentsMouseClicked
        // TODO add your handling code here:
        int row = tblEvaComponents.rowAtPoint(evt.getPoint());

        if (row >= 0) {
            TableModel acModel = tblEvaComponents.getModel();
            String acText = acModel.getValueAt(row, 1).toString();
            String acType = acModel.getValueAt(row, 2).toString();
            String text = String.format("[<b>%s</b>: %s]", acType, acText);
            txtEvaluationPreview.setText(text);
        }
    }//GEN-LAST:event_tblEvaComponentsMouseClicked

    private void tblArgRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblArgRelations.rowAtPoint(evt.getPoint());
        TableModel acModel = tblArgComponents.getModel();
        TableModel arModel = tblArgRelations.getModel();
        String relationString = ArgaelFormUtils.createArgumentRelationString(row, tblArgComponents, acModel, arModel);
        txtAnnotationPreview.setText(relationString);
    }//GEN-LAST:event_tblArgRelationsMouseClicked

    private void tblArgRelations1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArgRelations1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblArgRelations1MouseClicked

    private void tblEvaRelationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEvaRelationsMouseClicked
        // TODO add your handling code here:
        int row = tblEvaRelations.rowAtPoint(evt.getPoint());
        TableModel acModel = tblEvaComponents.getModel();
        TableModel arModel = tblEvaRelations.getModel();
        String relationString = ArgaelFormUtils.createArgumentRelationString(row, tblEvaComponents, acModel, arModel);
        txtEvaluationPreview.setText(relationString);
    }//GEN-LAST:event_tblEvaRelationsMouseClicked

    private void cmbTargetAnnotator1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTargetAnnotator1ActionPerformed
        // TODO add your handling code here:
        String targetUser = cmbTargetAnnotator1.getSelectedItem().toString();
        updatePanelData(edtTargetAnnotation, null, tblArgRelations2, targetUser, "");
    }//GEN-LAST:event_cmbTargetAnnotator1ActionPerformed

    private void btnArgRelCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArgRelCopyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnArgRelCopyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddArgument;
    private javax.swing.JButton btnAddArgument1;
    private javax.swing.JButton btnAddRelation;
    private javax.swing.JButton btnAddRelation1;
    private javax.swing.JButton btnArgRelCopy;
    private javax.swing.JButton btnDeleteAC;
    private javax.swing.JButton btnDeleteAC1;
    private javax.swing.JButton btnDeleteAR;
    private javax.swing.JButton btnDeleteAR1;
    private javax.swing.JComboBox<String> cmbArgCompType;
    private javax.swing.JComboBox<String> cmbArgCompType1;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbCategory1;
    private javax.swing.JComboBox<String> cmbIntent;
    private javax.swing.JComboBox<String> cmbIntent1;
    private javax.swing.JComboBox<String> cmbTargetAnnotator;
    private javax.swing.JComboBox<String> cmbTargetAnnotator1;
    private javax.swing.JEditorPane edtAssistedAnnotation;
    private javax.swing.JEditorPane edtSimpleAnnotation;
    private javax.swing.JEditorPane edtTargetAnnotation;
    private javax.swing.JLabel lblAddArgComp;
    private javax.swing.JLabel lblAddArgComp1;
    private javax.swing.JLabel lblAddArgRel;
    private javax.swing.JLabel lblAddArgRel1;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblDelete1;
    private javax.swing.JLabel lblDocList;
    private javax.swing.JLabel lblNumberArguments;
    private javax.swing.JLabel lblNumberArguments1;
    private javax.swing.JLabel lblNumberArguments2;
    private javax.swing.JLabel lblNumberRelations;
    private javax.swing.JLabel lblNumberRelations1;
    private javax.swing.JLabel lblNumberRelations2;
    private javax.swing.JLabel lblRelationPreview;
    private javax.swing.JLabel lblTargetAnnotator;
    private javax.swing.JLabel lblTargetAnnotator1;
    private javax.swing.JList<String> lstDocs;
    private javax.swing.JMenuItem mItemAbout;
    private javax.swing.JMenuItem mItemClose;
    private javax.swing.JMenuItem mItemExport;
    private javax.swing.JMenuItem mItemImportJsonl;
    private javax.swing.JMenuItem mItemImportText;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JPopupMenu.Separator menuHorzSeparator;
    private javax.swing.JMenu menuUser;
    private javax.swing.JPanel pnlAssistedAnnotation;
    private javax.swing.JPanel pnlEvaluation;
    private javax.swing.JPanel pnlIndependentAnnotation;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane10;
    private javax.swing.JScrollPane scrollPane11;
    private javax.swing.JScrollPane scrollPane12;
    private javax.swing.JScrollPane scrollPane13;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JScrollPane scrollPane3;
    private javax.swing.JScrollPane scrollPane4;
    private javax.swing.JScrollPane scrollPane5;
    private javax.swing.JScrollPane scrollPane6;
    private javax.swing.JScrollPane scrollPane7;
    private javax.swing.JScrollPane scrollPane8;
    private javax.swing.JScrollPane scrollPane9;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tblArgComponents;
    private javax.swing.JTable tblArgComponents1;
    private javax.swing.JTable tblArgRelations;
    private javax.swing.JTable tblArgRelations1;
    private javax.swing.JTable tblArgRelations2;
    private javax.swing.JTable tblEvaComponents;
    private javax.swing.JTable tblEvaRelations;
    private javax.swing.JEditorPane txtAnnotationPreview;
    private javax.swing.JEditorPane txtEvaluationPreview;
    // End of variables declaration//GEN-END:variables

    /**
     * Closes winform.
     */
    private void closeForm() {
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }

    /**
     *
     * @param user
     * @return
     */
    private Map<String, List<String[]>> getSavedAnnotationData(String user) {
        String directory = currDirectory + "\\..\\results\\" + user + "\\annotations\\";
        String currFile = currEntity;
        return IOManager.readAnnotationData(directory, currFile);
    }

    /**
     *
     * @param user
     * @return
     */
    private Map<String, Map<Integer, String>> getSavedEvaluationData(String user) {
        String directory = currDirectory + "\\..\\results\\" + user + "\\evaluations\\";
        String currFile = currEntity;
        return IOManager.readEvaluationData(directory, currFile);
    }

    /**
     *
     * @param report
     * @param acList
     * @return
     */
    public String highlightReport(String report, List<String[]> acList) {
        String hlText;
        String acText;
        String acType;

        for (int i = 0; i < acList.size(); i++) {
            acText = acList.get(i)[1];
            acType = acList.get(i)[2];

            switch (acType.toLowerCase()) {
                case "major claim":
                    hlText = model.getFormatter().highlightMajorClaim(acText);
                    break;
                case "claim":
                    hlText = model.getFormatter().highlightClaim(acText);
                    break;
                default:
                    hlText = model.getFormatter().highlightPremise(acText);
                    break;
            }
            report = report.replace(acText, hlText);
        }

        return report;
    }

    /**
     *
     * @param fileExt
     */
    private void importFilesFromDirectory(boolean reload) {

        // Reload document directory
        if (reload) {
            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new java.io.File("."));
            jfc.setDialogTitle("Select folder");
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jfc.setAcceptAllFileFilterUsed(false);

            if (jfc.showOpenDialog(ArgaelForm.this) == JFileChooser.APPROVE_OPTION) {
                currDirectory = jfc.getSelectedFile().toString();
            }
        }

        // Import documents/files
        File file = new File(currDirectory);
        if (file.isDirectory() && !StringUtils.isEmpty(fileExtension)) {
            List<String> files = model.readFilenamesInFolder(currDirectory, fileExtension);
            System.out.println(String.format(">> Directory: '%s' and number of uploaded files: %d", currDirectory, files.size()));

            lstDocs.removeAll();
            if (files.size() > 0) {
                DefaultListModel listModel = new DefaultListModel();
                listModel.addAll(files);
                lstDocs.setModel(listModel);
            }

        } else {
            System.out.println(">> Error importing documents/files [" + currDirectory + "]");
        }
    }

    /**
     *
     */
    private void refreshViewData() {
        acSelected.clear();

        // Refresh data of simple annotation view
        if (currTabIndex == 0) {
            updatePanelData(edtSimpleAnnotation, tblArgComponents, tblArgRelations, userName, "");
            this.txtAnnotationPreview.setText("");

        } else if (currTabIndex == 1) {

            String targetUser = cmbTargetAnnotator1.getSelectedItem().toString();
            updatePanelData(edtTargetAnnotation, null, tblArgRelations2, targetUser, "");
            updatePanelData(edtAssistedAnnotation, tblArgComponents1, tblArgRelations1, userName, "");

        } else if (currTabIndex == 2) {

            String targetUser = cmbTargetAnnotator1.getSelectedItem().toString();
            updatePanelData(null, tblEvaComponents, tblEvaRelations, targetUser, userName);
            this.txtEvaluationPreview.setText("");
        }
    }

    /**
     *
     */
    private void saveAnnotationsToFiles() {
        TableModel acModel = null;
        TableModel arModel = null;
        List<String[]> acAnnotations = new ArrayList<>();
        List<String[]> arAnnotations = new ArrayList<>();
        String fileName;
        List<String> header;

        if (currTabIndex == 0) {
            acModel = tblArgComponents.getModel();
            arModel = tblArgRelations.getModel();

        } else if (currTabIndex == 1) {
            acModel = tblArgComponents1.getModel();
            arModel = tblArgRelations1.getModel();
        }

        // Loop through the rows
        for (int i = 0; i < acModel.getRowCount(); i++) {
            String acId = acModel.getValueAt(i, 0).toString();
            String acText = acModel.getValueAt(i, 1).toString();
            String acType = acModel.getValueAt(i, 2).toString();
            String dateStamp = dateFormat.format(new Date());
            acAnnotations.add(new String[]{acId, acText, acType, userName, dateStamp});
        }

        // Loop through the rows
        for (int i = 0; i < arModel.getRowCount(); i++) {
            String arId = arModel.getValueAt(i, 0).toString();
            String acId1 = arModel.getValueAt(i, 1).toString();
            String acId2 = arModel.getValueAt(i, 2).toString();
            String relType = arModel.getValueAt(i, 3).toString();
            String relIntent = arModel.getValueAt(i, 4).toString();
            String dateStamp = dateFormat.format(new Date());
            arAnnotations.add(new String[]{arId, acId1, acId2, relType, relIntent, userName, dateStamp});
        }

        // Save ACs results
        fileName = currEntity + "_" + IOManager.FILE_ARG_COMP;
        header = new ArrayList<>(Arrays.asList("ac_id", "ac_text", "ac_type", "annotator", "timestamp"));
        saveResults(fileName, "annotations", header, acAnnotations);

        // Save ARs results
        fileName = currEntity + "_" + IOManager.FILE_ARG_REL;
        header = new ArrayList<>(Arrays.asList("ar_id", "ac_id1", "ac_id2", "rel_type", "rel_intent", "annotator", "timestamp"));
        saveResults(fileName, "annotations", header, arAnnotations);
    }

    /**
     *
     */
    private void saveEvaluationsToFiles() {
        String fileName;
        List<String> header;
        List<String[]> acEvaluations = new ArrayList<>();
        List<String[]> arEvaluations = new ArrayList<>();

        // Loop through the rows
        TableModel acModel = tblEvaComponents.getModel();
        for (int i = 0; i < acModel.getRowCount(); i++) {
            if (acModel.getValueAt(i, 3) != null) {
                String acId = acModel.getValueAt(i, 0).toString();
                String acQuality = acModel.getValueAt(i, 3).toString();
                String dateStamp = dateFormat.format(new Date());
                acEvaluations.add(new String[]{acId, acQuality, userName, dateStamp});
            }
        }

        // Loop through the rows
        TableModel arModel = tblEvaRelations.getModel();
        for (int i = 0; i < arModel.getRowCount(); i++) {
            if (arModel.getValueAt(i, 5) != null) {
                String arId = arModel.getValueAt(i, 0).toString();
                String arQuality = arModel.getValueAt(i, 5).toString();
                String dateStamp = dateFormat.format(new Date());
                arEvaluations.add(new String[]{arId, arQuality, userName, dateStamp});
            }
        }

        // Save ACs results
        fileName = currEntity + "_" + IOManager.FILE_ARG_COMP;
        header = new ArrayList<>(Arrays.asList("ac_id", "ac_quality", "evaluator", "timestamp"));
        saveResults(fileName, "evaluations", header, acEvaluations);

        // Save ARs results
        fileName = currEntity + "_" + IOManager.FILE_ARG_REL;
        header = new ArrayList<>(Arrays.asList("ar_id", "ar_quality", "evaluator", "timestamp"));
        saveResults(fileName, "evaluations", header, arEvaluations);
    }

    /**
     *
     * @param fileName
     * @param fileType
     * @param header
     * @param rows
     * @return
     */
    private boolean saveResults(String fileName, String fileType, List<String> header, List<String[]> rows) {
        boolean result;

        String directory = currDirectory + "\\..\\results\\" + userName + "\\" + fileType;
        String filePath = directory + "\\" + fileName + ".csv";
        List<String[]> data = new ArrayList<>();
        data.add(header.toArray(new String[header.size()]));
        data.addAll(rows);

        result = FileUtils.createDirectory(directory);
        if (result) {
            result = FileUtils.saveCsvFile(filePath, data);
            if (result) {
                System.out.println(">> Data saved correctly (" + fileType + ").");
            }
        }

        return result;
    }

    /**
     *
     */
    private void saveViewData() {
        if (!StringUtils.isEmpty(currEntity)) {
            if (currTabIndex == 0 || currTabIndex == 1) {
                saveAnnotationsToFiles();

            } else if (currTabIndex == 2) {
                saveEvaluationsToFiles();
            }
        }
    }

    /**
     * Sets the current user of the system.
     */
    private void setAppUsers() {
        String[] users = model.getUserList();
        String result = (String) JOptionPane.showInputDialog(this, "Please, select the annotator:", "Selection", JOptionPane.PLAIN_MESSAGE, null, users, "");

        if (result != null && result.length() > 0) {
            userName = result;
        } else {
            userName = "admin";
        }

        List<String> userList = new ArrayList<>(Arrays.asList(users));
        userList.add(0, "-");
        userList.remove(userName);
        ArgaelFormUtils.setComboBoxModel(this.cmbTargetAnnotator, userList);
        ArgaelFormUtils.setComboBoxModel(this.cmbTargetAnnotator1, userList);
        this.menuUser.setText("| User: " + userName);
    }

    /**
     *
     */
    private void setComboBoxes() {
        List<String> components = model.getArgumentComponents();
        List<String> relCategories = model.getRelationCategories();
        List<String> relIntents = model.getRelationIntents();

        components.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbArgCompType, components);
        ArgaelFormUtils.setComboBoxModel(this.cmbArgCompType1, components);

        relCategories.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbCategory, relCategories);
        ArgaelFormUtils.setComboBoxModel(this.cmbCategory1, relCategories);

        relIntents.add(0, "-");
        ArgaelFormUtils.setComboBoxModel(this.cmbIntent, relIntents);
        ArgaelFormUtils.setComboBoxModel(this.cmbIntent, relIntents);
    }

    /**
     *
     */
    private void setTablesLookAndFeel() {
        TableColumnModel colModel;

        // Argument Quality Selector
        List<String> qualityMetrics = model.getQualityMetrics();
        javax.swing.JComboBox cmbArgQuality = new javax.swing.JComboBox();
        ArgaelFormUtils.setComboBoxModel(cmbArgQuality, qualityMetrics);

        // Default column renderer
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);

        // ComboBox column renderer
        DefaultTableCellRenderer evalRenderer = new DefaultTableCellRenderer();
        evalRenderer.setToolTipText("Click to select the quality of the argument unit.");

        // Table 1: Argument Component Units
        colModel = tblArgComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(210);
        colModel.getColumn(2).setPreferredWidth(90);
        colModel.getColumn(2).setCellRenderer(centerRenderer);

        // Table 2: Argument Component Relations
        colModel = tblArgRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(110);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(90);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 3: Argument Relations Units
        colModel = tblArgRelations2.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(60);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(60);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(169);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 4: Argument Component Units
        colModel = tblArgComponents1.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(296);
        colModel.getColumn(2).setPreferredWidth(90);
        colModel.getColumn(2).setCellRenderer(centerRenderer);

        // Table 5: Argument Component Relations
        colModel = tblArgRelations1.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(50);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(50);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(50);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(159);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);

        // Table 6: Evaluation Argument Component Units
        colModel = tblEvaComponents.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(602);
        colModel.getColumn(2).setPreferredWidth(120);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(120);
        colModel.getColumn(3).setCellRenderer(evalRenderer);
        colModel.getColumn(3).setCellEditor(new DefaultCellEditor(cmbArgQuality));

        // Table 7: Evaluation Argument Component Relations
        colModel = tblEvaRelations.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(60);
        colModel.getColumn(0).setCellRenderer(centerRenderer);
        colModel.getColumn(1).setPreferredWidth(60);
        colModel.getColumn(1).setCellRenderer(centerRenderer);
        colModel.getColumn(2).setPreferredWidth(60);
        colModel.getColumn(2).setCellRenderer(centerRenderer);
        colModel.getColumn(3).setPreferredWidth(100);
        colModel.getColumn(3).setCellRenderer(centerRenderer);
        colModel.getColumn(4).setPreferredWidth(100);
        colModel.getColumn(4).setCellRenderer(centerRenderer);
        colModel.getColumn(5).setPreferredWidth(120);
        colModel.getColumn(5).setCellRenderer(evalRenderer);
        colModel.getColumn(5).setCellEditor(new DefaultCellEditor(cmbArgQuality));
    }

    /**
     *
     * @param editor
     * @param acTable
     * @param arTable
     * @param dataUser
     * @param evalUser
     */
    private void updatePanelData(javax.swing.JEditorPane editor, javax.swing.JTable acTable, javax.swing.JTable arTable, String dataUser, String evalUser) {

        // Get annotation data
        Map<String, List<String[]>> annotations = getSavedAnnotationData(dataUser);
        List<String[]> acData = annotations.get(IOManager.FILE_ARG_COMP);
        List<String[]> arData = annotations.get(IOManager.FILE_ARG_REL);

        // Get evaluation data
        Map<Integer, String> acEval = null;
        Map<Integer, String> arEval = null;
        if (!StringUtils.isEmpty(evalUser)) {
            Map<String, Map<Integer, String>> evaluations = getSavedEvaluationData(userName);
            acEval = evaluations.get(IOManager.FILE_ARG_COMP);
            arEval = evaluations.get(IOManager.FILE_ARG_REL);
        }

        // Update editor report
        if (editor != null) {
            String filepath = currDirectory + "\\" + currEntity + "." + fileExtension;
            String rawReport = this.model.getFileReport(filepath);
            String report = highlightReport(rawReport, acData);
            ArgaelFormUtils.updateEditorContent(editor, report);
        }

        // Update arguments components table
        try {
            DefaultTableModel acModel = ArgaelFormUtils.getTableModel(acTable);
            ArgaelFormUtils.loadArgTableData(acModel, acData, acEval, 3);
        } catch (Exception ex) {
            Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Update arguments relations table
        try {
            DefaultTableModel arModel = ArgaelFormUtils.getTableModel(arTable);
            ArgaelFormUtils.loadArgTableData(arModel, arData, arEval, 5);
        } catch (Exception ex) {
            Logger.getLogger(ArgaelForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Refresh current view data.
     */
    private void updateViewData() {
        if (!StringUtils.isEmpty(currEntity) && currTabIndex > -1) {
            System.out.println(" - Refresh data for view: " + tabbedPane.getTitleAt(currTabIndex) + ", and doc: " + currEntity);
            refreshViewData();
        }
    }

}
